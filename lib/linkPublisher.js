// Generated by CoffeeScript 1.6.3
(function() {
  var LinkPublisher, LinkSequenceBuilder;

  LinkSequenceBuilder = require("./link").LinkSequenceBuilder;

  LinkPublisher = (function() {
    function LinkPublisher(client) {
      this.client = client;
    }

    LinkPublisher.prototype.publish = function(message, callback) {
      var addresses, client, fee, outs, sequence, total, x, _i, _len;
      sequence = new LinkSequenceBuilder(this.client.opts.version);
      if (message.payloadInline != null) {
        sequence.addPayloadInline(message.payloadInline);
      }
      if (message.name != null) {
        sequence.addName(message.name);
      }
      if (message.keywords != null) {
        sequence.addKeywords(message.keywords);
      }
      if (message.description != null) {
        sequence.addDescription(message.description);
      }
      if (message.originalCreationDate != null) {
        sequence.addOriginalCreationDate(message.originalCreationDate);
      }
      if (message.lastModifiedDate != null) {
        sequence.addLastModifiedDate(message.lastModifiedDate);
      }
      addresses = sequence.getAddresses();
      client = this.client;
      outs = {};
      for (_i = 0, _len = addresses.length; _i < _len; _i++) {
        x = addresses[_i];
        outs[x] = 0.00000001;
      }
      fee = addresses.length * 0.002;
      total = (addresses.length * 0.00000001) + fee;
      return client.listUnspent(0, function(err, unspent) {
        var tx, useable, _j, _len1;
        useable = void 0;
        for (_j = 0, _len1 = unspent.length; _j < _len1; _j++) {
          tx = unspent[_j];
          if (tx.amount > 0) {
            useable = tx;
          }
          if (useable == null) {
            return console.log("No unspent");
          }
        }
        outs[useable.address] = useable.amount - total;
        return client.createRawTransaction([useable], outs, function(err, rawtx) {
          return client.decodeRawTransaction(rawtx, function(error, decoded) {
            return client.signRawTransaction(rawtx, [useable], function(error, decoded) {
              return client.sendRawTransaction(decoded.hex, function(error, result) {
                if (callback != null) {
                  return callback(result);
                }
              });
            });
          });
        });
      });
    };

    return LinkPublisher;

  })();

  exports.LinkPublisher = LinkPublisher;

}).call(this);
