// Generated by CoffeeScript 1.6.3
(function() {
  var LinkSequenceDecoder, ThreadBarrier, WritableBufferStream, bitcoin, bytesToHex, client, decodeBase58, decodeTx, nextBlock, startBuffer, startBufferStream, versionBuffer, x;

  bitcoin = require("bitcoin");

  require('buffertools');

  decodeBase58 = require('./link').decodeBase58;

  bytesToHex = require('./link').bytesToHex;

  WritableBufferStream = require('buffertools').WritableBufferStream;

  LinkSequenceDecoder = require("./link").LinkSequenceDecoder;

  client = new bitcoin.Client({
    host: 'localhost',
    port: 8332,
    user: 'Kevlar',
    pass: 'zabbas'
  });

  versionBuffer = new Buffer(1);

  versionBuffer.fill(14);

  startBufferStream = new WritableBufferStream();

  startBufferStream.write(versionBuffer);

  startBufferStream.write("Link");

  startBuffer = startBufferStream.getBuffer();

  ThreadBarrier = (function() {
    function ThreadBarrier(parties, block) {
      this.parties = parties;
      this.block = block;
    }

    ThreadBarrier.prototype.join = function() {
      --this.parties;
      if (this.parties < 1) {
        return this.block();
      }
    };

    return ThreadBarrier;

  })();

  decodeTx = function(tx) {
    var address, decoder, error, errors, spend, spends, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    spends = [];
    _ref = tx.vout;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      spend = _ref[_i];
      if (spend.value === 1e-8) {
        _ref1 = spend.scriptPubKey.addresses;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          address = _ref1[_j];
          spends.push(address);
        }
      }
    }
    console.log(spends);
    decoder = new LinkSequenceDecoder(spends);
    errors = decoder.verify();
    if (errors.length > 0) {
      for (_k = 0, _len2 = errors.length; _k < _len2; _k++) {
        error = errors[_k];
        console.log(error);
      }
    }
    console.log(decoder.payloadInline);
    console.log(decoder.name);
    return console.log(decoder.keywords);
  };

  x = 128100;

  nextBlock = function(blockIndex) {
    return client.getBlockHash(blockIndex, function(error, hash) {
      return client.getBlock(hash, function(error, block) {
        if (block.tx != null) {
          return (function(blockIndex) {
            var tb, tx, _i, _len, _ref, _results;
            tb = new ThreadBarrier(block.tx.length, function() {
              return nextBlock(blockIndex + 1);
            });
            _ref = block.tx;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tx = _ref[_i];
              _results.push(client.getRawTransaction(tx, function(err, raw) {
                return client.decodeRawTransaction(raw, function(error, tx) {
                  var address, b, data, linkStart, vout, _j, _k, _len1, _len2, _ref1, _ref2, _ref3;
                  _ref1 = tx.vout;
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    vout = _ref1[_j];
                    if (((_ref2 = vout.scriptPubKey) != null ? _ref2.addresses : void 0) != null) {
                      _ref3 = vout.scriptPubKey.addresses;
                      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                        address = _ref3[_k];
                        data = bytesToHex(decodeBase58(address));
                        linkStart = data.substring(0, 10);
                        b = new Buffer(linkStart, "hex");
                        if (b.compare(startBuffer) === 0) {
                          decodeTx(tx);
                        }
                      }
                    }
                  }
                  return tb.join();
                });
              }));
            }
            return _results;
          })(blockIndex);
        } else {
          return nextBlock(blockIndex + 1);
        }
      });
    });
  };

  nextBlock(x);

}).call(this);
